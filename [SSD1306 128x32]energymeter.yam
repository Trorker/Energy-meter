esphome:
  name: energy-meter
  friendly_name: Energy meter

esp8266:
  board: esp01_1m

# Enable logging
logger:

# Enable Home Assistant API
api:
  encryption:
    key: "BSfGeyfJtI5VPUCOeiMTSAZaIlbzspWLAAyA+nEXEE0="

ota:
  - platform: esphome
    password: "ad3dd93b43cd6970a259cc062e7877ac"

wifi:
  ssid: !secret wifi_ssid
  password: !secret wifi_password

  manual_ip:
    # Set this to the IP of the ESP
    static_ip: 192.168.1.136
    # Set this to the IP address of the router. Often ends with .1
    gateway: 192.168.1.1
    # The subnet of the network. 255.255.255.0 works for most home networks.
    subnet: 255.255.255.0

  # Enable fallback hotspot (captive portal) in case wifi connection fails
  ap:
    ssid: "Energy-Meter Fallback Hotspot"
    password: "3LPuOvexIeJV"

captive_portal:

#JSY energy meter protocol
uart:
  id: mod_bus
  tx_pin: GPIO01
  rx_pin: GPIO03
  baud_rate: 4800
  stop_bits: 1
 
modbus:
  id: modbus1
 
modbus_controller:
  - id: jsymk
    #modbus device address
    address: 0x1
    modbus_id: modbus1
    update_interval: 12s
    command_throttle: 50ms
 
i2c:
  sda: GPIO04
  scl: GPIO05
 
font:
  - file:
      type: gfonts
      family: Roboto
      weight: 500
    id: roboto_20_500
    size: 20
 
  - file:
      type: gfonts
      family: Roboto
      weight: 500
    id: roboto_16_500
    size: 16

  - file: "gfonts://Material+Symbols+Outlined"
    id: icons_14
    size: 13
    glyphs: ["\ue63e", "\ue648", "\uec1c", "\uec1b", "\uf161", "\uec1a"] # mdi-wifi, mdi-wifi-off, mdi-electric_bolt, ndi-electric_meter, mdi-energy_program_time_used, mdi-energy_savings_leaf

  - file: "gfonts://Material+Symbols+Outlined"
    id: icons_9
    size: 9
    glyphs: ["\ue836", "\ue837"] # mdi-radio_button_unchecked, mdi-radio_button_checked
 
display:
  - platform: ssd1306_i2c
    model: "SSD1306 128x32" # model: "SSD1306 128x64"
    address: 0x3C
    id: oled
    rotation: 90Â°
    lambda: |-
      // Syntax is always: it.print(<x>, <y>, <font>, [color=COLOR_ON], [align=TextAlign::TOP_LEFT], <text>);

      // Dati da visualizzare
      float potenza = 3100.0;   // esempio di valore di potenza
      float corrente = 5.0;    // esempio di valore di corrente
      float tensione = 220.0;   // esempio di valore di tensione
      
      //NavBar
      it.line(0, 16, it.get_width(), 16);
      it.printf(it.get_width(), 0, id(icons_14), TextAlign::TOP_RIGHT, id(connection_status).state == 1 ? "\ue63e" : "\ue648"); // Wi-Fi
      it.printf(0, 0, id(icons_14), TextAlign::TOP_LEFT, potenza > 500 ? "\uec1c" : "\uec1a"); // Usage

      //Footer
      it.line(0, it.get_height()-14, it.get_width(), it.get_height()-14);
      const int y = it.get_height();  // Altezza del display (basso)
      const int section_width = it.get_width() / id(sections);  // Larghezza di ogni sezione
      for (int i = 1; i <= id(sections); i++) {// Disegna i tre puntini
        int x = (section_width * i) - (section_width / 2);  // Centro di ogni sezione
        const char* icon = (id(page) == i) ? "\ue837" : "\ue836";  // Icona attiva o inattiva
        it.printf(x, y, id(icons_9), TextAlign::BOTTOM_CENTER, icon);
      }

      // Ruota il display di 0 gradi
      it.set_rotation(DISPLAY_ROTATION_0_DEGREES);

      // Posizione centrale del display
      const int center_x = it.get_width() / 2;
      const int center_y = it.get_height() / 2;

      // Pagine
      switch (id(page)) {
        case 1: // Pagina 1
          it.printf(center_x, center_y, id(roboto_20_500), TextAlign::CENTER, "%.1f W", potenza); // Potenza
          break;
        case 2: // Pagina 2
          it.printf(center_x, center_y , id(roboto_16_500), TextAlign::BOTTOM_CENTER, "%.1f V", tensione);  // Tensione
          it.printf(center_x, center_y, id(roboto_16_500), TextAlign::TOP_CENTER, "%.1f A", corrente);  // Corrente
          break;
        case 3: // Pagina 3
          it.printf(center_x, center_y, id(icons_14), TextAlign::CENTER, "\uf161");
          break;
      }

      // Ruota il display di 90 gradi
      it.set_rotation(DISPLAY_ROTATION_90_DEGREES); 

globals:
  - id: page
    type: int
    initial_value: "1"
  - id: sections
    type: int
    initial_value: "3"

interval:
  - interval: 5s
    then:
      - lambda: |-
          id(page) = (id(page) % id(sections)) + 1;
          id(oled).update();

binary_sensor:
# Connection status
  - platform: status
    name: "Status"
    id: connection_status

# Configura il pulsante
  - platform: gpio
    pin:
      number: GPIO12  # Pin del pulsante
      mode: INPUT_PULLUP
    name: "Pulsante Cambia Pagina"
    on_press:
      - lambda: |-
          id(page) = (id(page) % id(sections)) + 1;
          id(oled).update();

sensor:
# First channel voltage
  - platform: modbus_controller
    modbus_controller_id: jsymk
    id: voltage1
    name: "Voltage"
    icon: mdi:alpha-v-box
    device_class: energy
    address: 0x0048
    unit_of_measurement: "V"
    register_type: holding
    value_type: U_DWORD
    accuracy_decimals: 1
    filters:
      - multiply: 0.0001
    register_count: 1
    response_size: 4
 
# First channel current
  - platform: modbus_controller
    modbus_controller_id: jsymk
    id: current1
    name: "Current 1"
    icon: mdi:current-ac
    device_class: energy
    address: 0x0049
    unit_of_measurement: "A"
    register_type: holding
    value_type: U_DWORD
    accuracy_decimals: 1
    filters:
      - multiply: 0.0001
    register_count: 1
    response_size: 4
 
# First channel power
  - platform: modbus_controller
    modbus_controller_id: jsymk
    id: power1
    name: "Power 1"
    icon: mdi:lightning-bolt
    device_class: energy
    address: 0x004A
    unit_of_measurement: "W"
    register_type: holding
    value_type: U_DWORD
    accuracy_decimals: 1
    filters:
      - multiply: 0.0001
    register_count: 1
    response_size: 4
 
# First channel energy
  - platform: modbus_controller
    modbus_controller_id: jsymk
    id: energy1
    name: "Energy 1"
    icon: mdi:lightning-bolt
    device_class: energy
    address: 0x004B
    unit_of_measurement: "kWh"
    state_class: total
    register_type: holding
    value_type: U_DWORD
    accuracy_decimals: 1
    filters:
      - multiply: 0.0001
    register_count: 1
    response_size: 4
 
# First channel power factor
  - platform: modbus_controller
    modbus_controller_id: jsymk
    id: powerfactor1
    name: "Power Factor 1"
    icon: mdi:alpha-p-box
    device_class: energy
    address: 0x004C
    register_type: holding
    value_type: U_DWORD
    accuracy_decimals: 1
    filters:
      - multiply: 0.001
    register_count: 1
    response_size: 4
 
# First channel negative active energy
  - platform: modbus_controller
    modbus_controller_id: jsymk
    id: negativeactiveenergy1
    #name: "Negative Active Energy 1"
    icon: mdi:lightning-bolt
    device_class: energy
    address: 0x004D
    unit_of_measurement: "kWh"
    state_class: total
    register_type: holding
    value_type: U_DWORD
    accuracy_decimals: 1
    filters:
      - multiply: 0.0001
    register_count: 1
    response_size: 4
 
# First channel current direction
  - platform: modbus_controller
    modbus_controller_id: jsymk
    id: direction1
    #name: "Current Direction 1"
    icon: mdi:arrow-right
    device_class: energy
    address: 0x004E
    register_type: holding
    value_type: U_DWORD
    accuracy_decimals: 0
    bitmask: 0X01000000
    filters:
      - multiply: 1
    register_count: 1
    response_size: 4
 
# Frequency
  - platform: modbus_controller
    modbus_controller_id: jsymk
    id: frequency
    name: "Frequency"
    icon: mdi:sine-wave
    device_class: energy
    address: 0x004F
    unit_of_measurement: "Hz"
    register_type: holding
    value_type: U_DWORD
    accuracy_decimals: 1
    filters:
      - multiply: 0.01
    register_count: 1
    response_size: 4
 
# Second channel voltage
  - platform: modbus_controller
    modbus_controller_id: jsymk
    id: voltage2
    #name: "Voltage 2"
    icon: mdi:alpha-v-box
    device_class: energy
    address: 0x0050
    unit_of_measurement: "V"
    register_type: holding
    value_type: U_DWORD
    accuracy_decimals: 1
    filters:
      - multiply: 0.0001
    register_count: 1
    response_size: 4
 
# Second channel current
  - platform: modbus_controller
    modbus_controller_id: jsymk
    id: current2
    name: "Current 2"
    icon: mdi:current-ac
    device_class: energy
    address: 0x0051
    unit_of_measurement: "A"
    register_type: holding
    value_type: U_DWORD
    accuracy_decimals: 1
    filters:
      - multiply: 0.0001
    register_count: 1
    response_size: 4
 
# Second channel power
  - platform: modbus_controller
    modbus_controller_id: jsymk
    id: power2
    name: "Power 2"
    icon: mdi:lightning-bolt
    device_class: energy
    address: 0x0052
    unit_of_measurement: "W"
    register_type: holding
    value_type: U_DWORD
    accuracy_decimals: 1
    filters:
      - multiply: 0.0001
    register_count: 1
    response_size: 4
 
# Second channel energy
  - platform: modbus_controller
    modbus_controller_id: jsymk
    id: energy2
    name: "Energy 2"
    icon: mdi:lightning-bolt
    device_class: energy
    address: 0x0053
    unit_of_measurement: "kWh"
    state_class: total
    register_type: holding
    value_type: U_DWORD
    accuracy_decimals: 1
    filters:
      - multiply: 0.0001
    register_count: 1
    response_size: 4
 
# Second channel power factor
  - platform: modbus_controller
    modbus_controller_id: jsymk
    id: powerfactor2
    name: "Power Factor 2"
    icon: mdi:alpha-p-box
    device_class: energy
    address: 0x0054
    register_type: holding
    value_type: U_DWORD
    accuracy_decimals: 1
    filters:
      - multiply: 0.001
    register_count: 1
    response_size: 4
 
# Second channel negative active energy
  - platform: modbus_controller
    modbus_controller_id: jsymk
    id: negativeactiveenergy2
    #name: "Negative Active Energy 2"
    icon: mdi:lightning-bolt
    device_class: energy
    address: 0x0055
    unit_of_measurement: "kWh"
    state_class: total
    register_type: holding
    value_type: U_DWORD
    accuracy_decimals: 1
    filters:
      - multiply: 0.0001
    register_count: 1
    response_size: 4
 
# Second channel current direction
  - platform: modbus_controller
    modbus_controller_id: jsymk
    id: direction2
    #name: "Current Direction 2"
    icon: mdi:arrow-right
    device_class: energy
    address: 0x004E
    register_type: holding
    value_type: U_DWORD
    accuracy_decimals: 0
    bitmask: 0X00010000
    filters:
      - multiply: 1
    register_count: 1
    response_size: 4
    
